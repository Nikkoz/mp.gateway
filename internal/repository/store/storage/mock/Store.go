// Code generated by mockery v2.20.2. DO NOT EDIT.

package mockStoreStorage

import (
	context "github.com/Nikkoz/mp.gateway/pkg/types/context"
	mock "github.com/stretchr/testify/mock"

	store "github.com/Nikkoz/mp.gateway/internal/domain/store"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateStore provides a mock function with given fields: ctx, _a1
func (_m *Store) CreateStore(ctx context.Context, _a1 *store.Store) (*store.Store, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *store.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *store.Store) (*store.Store, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *store.Store) *store.Store); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*store.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *store.Store) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
